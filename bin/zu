#!/usr/bin/env ruby
## The goal: like "uz", but smarter.

# TODO:
# - Refactor this
# - Add --help
# - Make -d delete all archives on the args lit (use an options gem)
# - Build if given -b ?
# - Add these formats:
#   .jar (zip)
#   .lzma (unlzma)
#   .tlz (unlzma)
#   .7z (7z)
#   .apk (zip?)
#   ...?

class Array
  def polite?
    dir_match = %r[[^/]+/]
    first = self[0][dir_match]
    self.size == 1 or (
      first and size == select do |e| e[dir_match] == first end.size
    )
  end
end

def redwarn msg
  warn "\e[31m#{msg}\e[0m"
end

def maybe_download str
  return str unless str[%r(^(?:ht|f)tp.+/(.+))]
  $delete_afterward = true # just treat the download as temporary.
  if File.exists? $1
    redwarn "#$1 already exists. Not re-downloading."
    exit 3
  end
  unless system 'wget', str
    redwarn "#$1 appears to be a downloadable file, but download failed. Please verify that 'wget' is installed and available in your PATH."
  end
  $1
end

def rpm2tgz rpm_name
    tgzname = File.basename(full_path, '.rpm') + '.tgz'
    system 'rpm2tgz', full_path
    tgzname
end

$delete_afterward = false
def extract e
  if '-d' == e
    $delete_afterward = true
    return
  end
  f = maybe_download e
  return redwarn "'#{f}' doesn't seem to exist." unless File.exists? f
  full_path = File.expand_path f
  basename = File.basename f
  ext = File.extname f
  simplename = basename.chomp ext
  if '.tar' == File.extname(simplename)
    simpename = simplename.chomp '.tar'
    ext = '.tar' + ext
  end

  run_and_split = proc do |cmd_and_args|
    IO.popen(cmd_and_args + ' ' + full_path).read.split /\n/
  end

  files_list, extract_cmd = *(
    case ext.downcase
    when '.zip'; [ run_and_split['zipinfo -1'], %w(unzip) ]
    when '.tar'; [ run_and_split['tar tf'], %w(tar xvf) ]
    when '.tar.gz', '.tgz'; [ run_and_split['tar tzf'], %w(tar xvzf) ]
    when '.tar.bz2', '.tbz2'; [ run_and_split['tar tjf'], %w(tar xvjf) ]
    when '.tar.xz', '.txz'; [ run_and_split['tar tJf'], %w(tar xvJf) ]
    when '.deb', '.ar'; [ run_and_split['ar t'], %w(ar xv) ]
    when '.rpm'; return extract rpm2tgz[full_path]
    when '.gz', '.xz', '.bz2'
      [
        [ simplename ],
        { '.gz' => %w(gunzip), '.xz' => %w(unxz), '.bz2' => %w(bunzip2) }[ext]
      ]
    else
      return redwarn "'#{f}' - Unknown extension. Doing nothing with it."
    end)

  extract = proc do
    extract_cmd.push full_path
    if system *extract_cmd
      if $delete_afterward
        File.exist? full_path and File.unlink full_path
      end
    else
      redwarn "`#{extract_cmd.join ' '}` failed (#{$?})."
    end
  end

  if files_list.polite?
    extract.call
  else
    puts "# Caught impoliteness. mkdir \e[34;1m#{simplename}\e[0m/, then."
    Dir.mkdir simplename
    Dir.chdir simplename do
      extract.call
    end
  end
end

ARGV.each do |e|
  extract e
end
